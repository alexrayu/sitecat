<?php

/**
 * @file
 * Contains aspambot.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function aspambot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the aspambot module.
    case 'help.page.aspambot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A pretentious spam blocker.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function aspambot_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#validate'][] = 'aspambot_form_validate';
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function aspambot_form_validate($form, FormStateInterface $form_state) {
  $ip = \Drupal::request()->getClientIP();
  $fail_message = t('This form has not been submitted.');

  // Don't handle localhost.
  if ($ip == '127.0.0.1') {
    return;
  }

  // Handle countries block.
  if (function_exists('geoip_country_code_by_name')) {
    $user = \Drupal::currentUser();
    if (!$user->isAuthenticated()) {
      $banned_countries = \Drupal::config('aspambot.settings')->get('countries');
      $reverse = \Drupal::config('aspambot.settings')->get('reverse');
      $country = geoip_country_code_by_name($ip);
      if ($reverse) {
        if (!in_array($country, $banned_countries)) {
          $form_state->setErrorByName('', $fail_message);
        }
      }
      else {
        if (in_array($country, $banned_countries)) {
          $form_state->setErrorByName('', $fail_message);
        }
      }
    }
  }
  else {
    drupal_set_message(t('PHP GeoIp Extension is not installed but is required.'), 'error');
  }

  // Handle AbuseIPDB.
  $abuseipdb_key = \Drupal::config('aspambot.settings')->get('abuseipdb_key');
  if ($abuseipdb_key) {
    $abuseipdb_url = 'https://www.abuseipdb.com/check/' . $ip . '/json?key=' . $abuseipdb_key;
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, $abuseipdb_url);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $abuseipdb_response = json_decode(curl_exec($ch));
    curl_close($ch);
    if (count($abuseipdb_response) > 1) {
      $form_state->setErrorByName('', $fail_message);
    }
  }

}
