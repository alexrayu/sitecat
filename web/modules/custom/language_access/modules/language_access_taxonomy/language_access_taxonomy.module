<?php

/**
 * @file
 * Contains language_access_taxonomy.module.
 */

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\taxonomy\TermForm;
use Drupal\taxonomy\TermInterface;
use Drupal\taxonomy\VocabularyInterface;


function _language_access_taxonomy_get_metadata($vid) {
  $vocabulary = Vocabulary::load($vid);

  if ($vocabulary instanceof VocabularyInterface) {
    /** @var \Drupal\content_translation\ContentTranslationManager $translation_manager */
    $translation_manager = \Drupal::service('content_translation.manager');
    // Some taxonomy metadata.
    $taxonomy_id = $vocabulary->id();
    $taxonomy_config = \Drupal::config('language.content_settings.taxonomy_term.' . $taxonomy_id);
    $translation_enabled = $translation_manager->isEnabled('taxonomy_term', $taxonomy_id);
    $language_alterable = $taxonomy_config->get('language_alterable');
    $language = $vocabulary->language()->getId();
    $default_language = $taxonomy_config->get('default_langcode');
    $neutral = (!$translation_enabled && !$language_alterable && $language == LanguageInterface::LANGCODE_NOT_APPLICABLE);
    $allow_undefined = $vocabulary->getThirdPartySetting('language_access_taxonomy', 'allow_undefined') ? TRUE : FALSE;
    $optional = ($translation_enabled && $language_alterable && $allow_undefined);

    return [
      'vocabulary' => $vocabulary,
      'translation_enabled' => $translation_enabled,
      'language_alterable' => $language_alterable,
      'language' => $language,
      'default_language' => $default_language,
      'neutral' => $neutral,
      'optional' => $optional,
      'allow_undefined' => $allow_undefined,
    ];
  }

  return FALSE;
}

function _language_access_taxonomy_parse_filter($data) {
  if (!is_array($data)) {
    $data = _language_access_taxonomy_get_metadata($data);
  }

  /** @var \Drupal\language_access_taxonomy\LanguageAccessTaxonomyHelper $taxonomy_helper */
  $taxonomy_helper = \Drupal::service('language_access_taxonomy.helper');

  if ($data['neutral']) {
    return $taxonomy_helper::CASE__INAPPLICABLE;
  }

  if ($data['optional']) {
    return $taxonomy_helper::CASE__USER_LANGUAGES_PLUS_UNDEFINED;
  }

  return $taxonomy_helper::CASE__USER_LANGUAGES;
}

/**
 * Implements hook_preprocess_table().
 */
function language_access_taxonomy_preprocess_table(&$variables) {
  preg_match('/^\/admin\/structure\/taxonomy\/manage\/(.*?)\/overview$/', $variables['current_path'], $path_matches);

  if (is_array($path_matches) && count($path_matches) === 2 && !empty($variables['rows']) && $metadata = _language_access_taxonomy_get_metadata($path_matches[1])) {
    $variables['#cache']['contexts'][] = 'url.query_args:noskip';
    /** @var \Drupal\language_access\LanguageAccessHelper $helper */
    $helper = \Drupal::service('language_access.helper');

    $new_entry_key = NULL;

    // Get key we want to add the new value to.
    foreach ($variables['rows'][0]['cells'] as $key => $cell) {
      if (
        isset($variables['rows'][0]['cells'][$key]['content']['#type']) &&
        $variables['rows'][0]['cells'][$key]['content']['#type'] === 'operations'
      ) {
        $new_entry_key = $key;
      }
    }

    // Check if the key value has changed, otherwise return void.
    if ($new_entry_key === NULL) {
      return;
    }

    if (!$metadata['neutral']) {
      $lang_header = [
        'langcode' => [
          'tag' => 'th',
          'content' => t('Language'),
        ],
      ];
      $variables['header'] = array_slice($variables['header'], 0, $new_entry_key, TRUE) + $lang_header + array_slice($variables['header'], $new_entry_key, NULL, TRUE);

      // Iterate through all rows.
      foreach ($variables['rows'] as $key => $row) {
        // Get tid of term.
        if (!isset($row["cells"][0]["content"]["tid"]["#value"])) {
          continue;
        }

        $tid = $row["cells"][0]["content"]["tid"]["#value"];

        /** @var \Drupal\taxonomy\Entity\Term $term */
        $term = Term::load($tid);
        if (!($term instanceof TermInterface)) {
          continue;
        }

        $language = $term->language();

        // Unset row if the user doesn't have access to language of term.
        $noskip = \Drupal::request()->get('noskip');
        if (empty($noskip)) {
          if (($metadata['optional'] && !$helper->userHasAccessToLanguageOrLanguageNeutral($variables['user'], $language)) || (!$metadata['optional'] && !$helper->userHasAccessToLanguage($variables['user'], $language))) {
            unset($variables['rows'][$key]);
            continue;
          }
        }

        // Add new cell with the copy as value.
        $lang_cell = [
          [
            'tag' => 'td',
            'content' => $language->getName(),
          ],
        ];
        array_splice($variables['rows'][$key]['cells'], $new_entry_key, 0, $lang_cell);
      }
    }
  }

  // On /translate tab of nodes, we want to filter allowed target languages.
  if ($variables['current_path'] === '/admin/structure/menu') {

    /** @var \Drupal\Core\Session\AccountProxy $current_user */
    $current_user = $variables['user'];

    /** @var \Drupal\language_access\LanguageAccessHelper $language_access_helper */
    $helper = \Drupal::service('language_access.helper');

    /** @var \Drupal\language\Entity\ConfigurableLanguage[] $user_languages */
    $user_languages = $helper->getLanguagesOfUser($current_user);

    $user_languages_langcodes = [];
    foreach ($user_languages as $language) {
      $user_languages_langcodes[] = $language->id();
    }

    // Iterate through all rows.
    /** @var array $menu_items */
    $menu_items = $variables['rows'];
    foreach ($menu_items as $key => $row) {
      $has_access = FALSE;

      foreach ($user_languages_langcodes as $langcode) {
        if (preg_match("/{$langcode}/", $row['cells']['title']['content'])) {
          $has_access = TRUE;
          break;
        }
      }

      if ($has_access === FALSE) {
        unset($variables['rows'][$key]);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function language_access_taxonomy_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  /* Performs language-related changes to various forms in the site.
 ** This mostly means limiting the language selections to those a user has
  * access to.*/

  if ($form_id === 'taxonomy_vocabulary_form') {
    if (!$form_state->getFormObject() instanceof EntityForm) {
      return;
    }
    /** @var Vocabulary $vocabulary */
    $vocabulary = $form_state->getFormObject()->getEntity();

    $form['language_access'] = [
      '#type' => 'details',
      '#open' => TRUE,
      '#title' => t('Language Access'),
    ];

    $form['language_access']['allow_undefined'] = [
      '#type' => 'checkbox',
      '#title' => t('Allow "Undefined" language'),
      '#description' => t('If the vocabulary is translatable, this determines whether "undefined" is allowed as a choice.'),
      '#default_value' => $vocabulary->getThirdPartySetting('language_access_taxonomy', 'allow_undefined', FALSE),
    ];

    $form['#entity_builders'][] = 'language_access_taxonomy_vocabulary_form_builder';
  }

  if ($form_id === 'taxonomy_overview_terms') {
    $taxonomy_overview_filter_by = \Drupal::request()->get('filter_by');
    $languages_of_user = \Drupal::service('language_access.helper')
      ->getLanguagesOfUser();

    $languages = [t('-None-')];
    foreach ($languages_of_user as $language => $value) {
      $languages[$language] = $value->label();
    }

    $form['select_box_languages'] = [
      '#type' => 'select',
      '#title' => t('Filter by Language'),
      '#description' => t('Choose the language, you want to filter by.'),
      '#options' => $languages,
      '#default_value' => $taxonomy_overview_filter_by,
    ];

    $form['filter_language_button'] = [
      '#type' => 'submit',
      '#value' => t('Filter'),
      '#submit' => ['language_access_taxonomy_filter_language_form_submit'],
      '#attributes' => [
        'style' => 'margin-left: 0px; margin-bottom: 10px',
        'class' => [
          'button',
        ],
      ],
    ];

    if (!empty($form_state->getUserInput())) {
      $selected_language = $form_state->getUserInput()['select_box_languages'];
      \Drupal::request()->query->set('filter_by', $selected_language);
    }

    $form['select_box_languages']['#weight'] = -1;
    $form['filter_language_button']['#weight'] = -1;

    if (isset($form['terms'])) {
      foreach ($form['terms'] as $key => $value) {
        if (strpos($key, 'tid:') === 0) {
          $term = $value['#term'];
          /** @var $term TermInterface */
          if ($taxonomy_overview_filter_by && $taxonomy_overview_filter_by !== $term->language()
              ->getId()) {
            unset($form['terms'][$key]);
          }
        }
      }
    }
  }
}

/**
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function language_access_taxonomy_filter_language_form_submit(array $form, FormStateInterface $form_state) {

  $form_state->setUserInput([]);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function language_access_taxonomy_field_widget_language_select_form_alter(&$element, FormStateInterface $form_state, $context) {
  $base_form_id = $form_state->getBuildInfo()['base_form_id'];

  if ($base_form_id !== 'taxonomy_term_form') {
    return;
  }

  $element['#after_build'][] = 'language_access_taxonomy_language_select_after_build';

}

/**
 * Entity form builder for the node type form to map some values to third party
 * settings
 */
function language_access_taxonomy_vocabulary_form_builder($entity_type, VocabularyInterface $vocabulary, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('allow_undefined')) {
    $vocabulary->setThirdPartySetting('language_access_taxonomy', 'allow_undefined', TRUE);
    return;
  }

  $vocabulary->unsetThirdPartySetting('language_access_taxonomy', 'allow_undefined');
}

/**
 * After build function.
 *
 * Unset invalid and disabled options in the language select list.
 *
 * @param array $form
 *   Form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state.
 *
 * @return array
 *   Return form.
 */
function language_access_taxonomy_language_select_after_build(array $form, FormStateInterface $form_state) {
  // Disable language selection field for all taxonomy term edit pages.
  if (!$form_state->getFormObject() instanceof TermForm) {
    return $form;
  }

  /** @var Term $term */
  $term = $form_state->getFormObject()->getEntity();
  $vid = $term->getVocabularyId();

  if ($metadata = _language_access_taxonomy_get_metadata($vid)) {
    $filter = _language_access_taxonomy_parse_filter($metadata);

    if (isset($form['value']) && $options = $form['value']['#options']) {
      // Options for langcode field.
      /** @var \Drupal\language_access_taxonomy\LanguageAccessTaxonomyHelper $taxonomy_helper */
      $taxonomy_helper = \Drupal::service('language_access_taxonomy.helper');

      $options = $taxonomy_helper->filterLanguages($options, $filter);
      $form['value']['#options'] = $options;
    }
  }

  return $form;
}

