<?php

/**
 * @file
 * Contains sitecat_paragraphs.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_theme($existing, $type, $theme, $path) {
  $response = [];
  $response['sitecat_background_youtube'] = [
    'render element' => 'data',
    'template' => 'sitecat_background_youtube',
  ];

  return $response;
}

/**
 * Implements hook_help().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the sitecat_paragraphs module.
    case 'help.page.sitecat_paragraphs':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Functionality for custom paragraphs.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_preprocess_paragraph(&$variables) {
  switch ($variables['paragraph']->getType()) {
    case 'hero':
      sitecat_paragraphs_preprocess_paragraph_hero($variables);
      break;

    case 'cta_button':
      sitecat_paragraphs_preprocess_paragraph_cta_button($variables);
      break;
  }

}

/**
 * Callback of hook_preprocess_HOOK() for the hero paragraph.
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_preprocess_paragraph_hero(&$variables) {
  $paragraph = $variables['paragraph'];
  $variables['raw']['heading'] = $paragraph->field_heading->value;
  $variables['raw']['hero_text'] = $paragraph->field_hero_text->value;
}

/**
 * Callback of hook_preprocess_HOOK() for the cta button paragraph.
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_preprocess_paragraph_cta_button(&$variables) {
  $paragraph = $variables['paragraph'];
  $classes = explode(' ', $paragraph->field_html_classes->value);
  if (!empty($variables['content']['field_link'])) {
    $variables['content']['field_link'][0]['#attributes']['class'] = $classes;
  }
  unset($variables['content']['field_html_classes']);
}

/**
 * Implements hook_ENTITY_TYPE_view().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_media_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($view_mode == 'background' && $entity->bundle() == 'remote_video') {
    $parts = explode('?v=', $entity->field_media_oembed_video->value);
    if (empty($parts) || count($parts) < 2) {
      $build = [];
      return;
    }
    $widget_counts =& drupal_static(__FUNCTION__, 0);
    $build = [
      '#theme' => 'sitecat_background_youtube',
      'data' => [
        'video_id' => $parts[1],
        'html_id' => 'bg-video-embed-' . $widget_counts,
        'origin' => \Drupal::request()->getSchemeAndHttpHost(),
      ],
    ];
    $widget_counts++;
  }
}

/**
 * Implmenets hook_preprocess_HOOK().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_preprocess_html(&$variables) {
  if (sitecat_paragraphs_is_hero()) {
    $variables['attributes']['class'][] = 'is-hero';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (sitecat_paragraphs_is_hero()) {
    $all_suggestions = $suggestions;
    foreach ($all_suggestions as $suggestion) {
      $suggestions[] = $suggestion . '__hero';
    }
  }
}

/**
 * Identify whether the currnt page is a hero page.
 *
 * @return bool
 *   Result.
 */
function sitecat_paragraphs_is_hero() {
  $is_hero = &drupal_static(__FUNCTION__, -1);
  if ($is_hero !== -1) {
    return $is_hero;
  }
  if ($node = \Drupal::request()->attributes->get('node')) {
    if ($node->hasField('field_paragraphs')) {
      $values = $node->field_paragraphs->getValue();
      if (!empty($values[0]['target_id'])) {
        $paragraph = Paragraph::load($values[0]['target_id']);
        if ($paragraph instanceof Paragraph && $paragraph->getType() === 'hero') {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Implements hook_page_attachments_alter().
 *
 * {@inheritdoc}
 */
function sitecat_paragraphs_page_attachments_alter(array &$attachments) {
  $attachments['#attached']['library'][] = 'sitecat_paragraphs/lib';
}
